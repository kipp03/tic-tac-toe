
<!DOCTYPE html>
<html>
<head><style>
*{
    padding: 0;
    margin: 0;
    
}
.container {
    margin: 0 auto;
    display: grid;
    background-color: black;
    grid-template-columns: 33% 33% 33%;
    grid-template-rows: 33% 33% 33%;
    max-width: 300px;
}
.tile {
    color: greenyellow;
    border: 1px solid greenyellow;
    min-width: 100px;
    min-height: 100px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 50px;
    cursor: pointer;
}
.display,.announcer{
    font-size: 20px;
    
}
</style>
</head>
<body bgcolor="navyblue" align="center">
    <br><br><br>
        <section >
            <h1>Tic Tac Toe</h1>
            <br>
        </section>
        <section class="display">
            Player <span class="display-player ">X</span>'s turn
        </section>
        <br><br><br>
        <section class="container">
            <div class="tile"></div>
            <div class="tile"></div>
            <div class="tile"></div>
            <div class="tile"></div>
            <div class="tile"></div>
            <div class="tile"></div>
            <div class="tile"></div>
            <div class="tile"></div>
            <div class="tile"></div>
        </section>
        <br><br>
        <section class="announcer"></section>
        <br><br>
        <section class="controls">
            <button id="reset">Reset</button>
        </section>

</body>
<script >

const tiles = Array.from(document.querySelectorAll('.tile'));
const playerDisplay = document.querySelector('.display-player');
const resetButton = document.querySelector('#reset');
const announcer = document.querySelector('.announcer');
let board=['', '', '','', '', '','', '', ''] ;

let currentPlayer = 'X';
let isGameActive = true;

const PLAYERX_WON = 'PLAYERX_WON';
const PLAYERO_WON = 'PLAYERO_WON';
const PLAYERZ_WON ='PLAYERZ_WON';
const TIE = 'TIE'; 

const winningConditions = [
   [0, 1, 2],
   [3, 4, 5],
   [6, 7, 8],
   [0, 3, 6],
   [1, 4, 7],
   [2, 5, 8],
   [0, 4, 8],
   [2, 4, 6]
];

const isValidAction = (tile) => {
    if (tile.innerText == 'X' || tile.innerText == 'O' ){
        return false;
    }

    return true;
};

const updateBoard =  (index) => {
   board[index] = currentPlayer;
}


const changePlayer = () => {
    currentPlayer = (currentPlayer == 'X' ? 'O' : 'X');

    playerDisplay.innerText = currentPlayer;
}
const announce = (type) => {
    switch(type){
       case PLAYERO_WON:
            announcer.innerHTML = 'Player O Won';
            break;
       case PLAYERX_WON:
            announcer.innerHTML = 'Player X Won';
            break;
      
       case TIE:
            announcer.innerHTML = 'Tie';
       break;  
           
       }
};

function handleResultValidation() {
  let roundWon = false;
  for (let i = 0; i <= 7; i++) {
   
    const a = board[winningConditions[i][0]];
    const b = board[winningConditions[i][1]];
    const c = board[winningConditions[i][2]];
    if (a == "" || b == "" || c == "") {
      continue;
    }
    if (a == b && b == c) {
      roundWon = true;
      break;
    }
  }

  if (roundWon) {
    announce(currentPlayer == "X" ? PLAYERX_WON : PLAYERO_WON);
    isGameActive = false;
    return;
  }
 
  else if (!board.includes("")) announce(TIE);
}
const userAction = (tile, index) => {
  if (isValidAction(tile) && isGameActive) {
    tile.innerText = currentPlayer;
   
    updateBoard(index);
    handleResultValidation();
    changePlayer();
  }
};
tiles.forEach( (tile, index) => {
    
       tile.addEventListener('click', () => userAction(tile, index));
       
});

const resetBoard = () => {
    board = ['', '', '', '', '', '', '', '', ''];
    isGameActive = true;
 
    announcer.innerHTML="New game";
    if (currentPlayer == 'O'  ) {
        changePlayer();
    }

    tiles.forEach(tile => {
        tile.innerText = '';

    });
}

resetButton.addEventListener('click', resetBoard);
</script>



</html>
